{"ast":null,"code":"var _jsxFileName = \"C:\\\\saran\\\\healthCare\\\\healthcare\\\\c\\\\clie\\\\src\\\\components\\\\PatientContainers\\\\Dialog\\\\ApptDialog.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Dialog, DialogContent, DialogTitle, Typography, Chip, Avatar, IconButton } from '@mui/material';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport ArrowForwardIcon from '@mui/icons-material/ArrowForward';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ApptDialog({\n  doctorUniqId,\n  id,\n  dialogOpen,\n  handleCloseDialog,\n  selectedDate,\n  doctorsAvailability,\n  setSelectedStartTime,\n  handleBooking\n}) {\n  _s();\n  const [selectedDoctorInfo, setSelectedDoctorInfo] = useState(null);\n  const [displayStartDate, setDisplayStartDate] = useState(new Date(selectedDate));\n  const displayEndDate = new Date(displayStartDate.getTime() + 7 * 24 * 60 * 60 * 1000); // 7 days later\n\n  useEffect(() => {\n    const doctorInfo = doctorsAvailability.find(doctor => doctor.doctorId === doctorUniqId);\n    setSelectedDoctorInfo(doctorInfo);\n\n    // Update displayStartDate based on the selectedDate\n    setDisplayStartDate(new Date(selectedDate));\n  }, [doctorsAvailability, doctorUniqId, selectedDate]);\n  const getAvailableSlotsForDate = date => {\n    if (selectedDoctorInfo) {\n      const availabilityItem = selectedDoctorInfo.availability.find(item => item.dates[0] === date);\n      return availabilityItem ? availabilityItem.startTimes : [];\n    }\n    return [];\n  };\n  const convertTo12HourFormat = time => {\n    const [hours, minutes] = time.split(\":\");\n    const parsedHours = parseInt(hours, 10);\n    const ampm = parsedHours >= 12 ? \"PM\" : \"AM\";\n    const twelveHour = parsedHours % 12 || 12;\n    return `${twelveHour}:${minutes} ${ampm}`;\n  };\n  const formatSelectedDate = (startDate, endDate) => {\n    const startMonth = startDate.toLocaleString('en-US', {\n      month: 'short'\n    });\n    const startDay = startDate.getDate();\n    const endMonth = endDate.toLocaleString('en-US', {\n      month: 'short'\n    });\n    const endDay = endDate.getDate();\n    return `${startMonth} ${startDay} to ${endMonth} ${endDay}`;\n  };\n  const isDateAvailable = date => {\n    return selectedDoctorInfo.availability.some(item => item.dates[0] === date);\n  };\n  console.log(isDateAvailable);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Dialog, {\n      open: dialogOpen,\n      onClose: handleCloseDialog,\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        style: {\n          margin: \"1rem\",\n          borderBottom: \"2px grey solid\",\n          display: \"flex\",\n          alignItems: \"center\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        style: {\n          margin: \"1rem\"\n        },\n        children: selectedDoctorInfo && Array.from({\n          length: 7\n        }, (_, index) => {\n          const currentDate = new Date(selectedDate);\n          currentDate.setDate(currentDate.getDate() + index);\n          const formattedDate = currentDate.toLocaleDateString('en-US', {\n            month: 'short',\n            day: 'numeric'\n          });\n          const availability = getAvailableSlotsForDate(formattedDate);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              style: {\n                fontSize: '15px'\n              },\n              variant: \"body2\",\n              children: formattedDate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 33\n            }, this), availability.length > 0 ? availability.map((startTime, slotIndex) => /*#__PURE__*/_jsxDEV(Chip, {\n              style: {\n                padding: \"0.5rem\",\n                fontSize: \"15px\",\n                borderRadius: \"2px\",\n                margin: '0.3rem',\n                background: \"yellow\"\n              },\n              label: convertTo12HourFormat(startTime) // Convert time to 12-hour format\n              ,\n              className: \"mt-2\",\n              onClick: () => {\n                setSelectedStartTime(startTime);\n                handleBooking(doctorUniqId, id, formattedDate, startTime);\n              }\n            }, slotIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 41\n            }, this)) : /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              style: {\n                color: \"grey\"\n              },\n              children: \"No Availability\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 37\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 10\n  }, this);\n}\n_s(ApptDialog, \"y6PJG0/FT5fz6xfA5ORUcYbkIPs=\");\n_c = ApptDialog;\nvar _c;\n$RefreshReg$(_c, \"ApptDialog\");","map":{"version":3,"names":["React","useEffect","useState","Dialog","DialogContent","DialogTitle","Typography","Chip","Avatar","IconButton","ArrowBackIcon","ArrowForwardIcon","jsxDEV","_jsxDEV","ApptDialog","doctorUniqId","id","dialogOpen","handleCloseDialog","selectedDate","doctorsAvailability","setSelectedStartTime","handleBooking","_s","selectedDoctorInfo","setSelectedDoctorInfo","displayStartDate","setDisplayStartDate","Date","displayEndDate","getTime","doctorInfo","find","doctor","doctorId","getAvailableSlotsForDate","date","availabilityItem","availability","item","dates","startTimes","convertTo12HourFormat","time","hours","minutes","split","parsedHours","parseInt","ampm","twelveHour","formatSelectedDate","startDate","endDate","startMonth","toLocaleString","month","startDay","getDate","endMonth","endDay","isDateAvailable","some","console","log","children","open","onClose","fullWidth","style","margin","borderBottom","display","alignItems","fileName","_jsxFileName","lineNumber","columnNumber","Array","from","length","_","index","currentDate","setDate","formattedDate","toLocaleDateString","day","fontSize","variant","map","startTime","slotIndex","padding","borderRadius","background","label","className","onClick","color","_c","$RefreshReg$"],"sources":["C:/saran/healthCare/healthcare/c/clie/src/components/PatientContainers/Dialog/ApptDialog.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {\r\n    Dialog,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Typography,\r\n    Chip,\r\n    Avatar,\r\n    IconButton,\r\n} from '@mui/material';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport ArrowForwardIcon from '@mui/icons-material/ArrowForward';\r\n\r\nexport default function ApptDialog({ doctorUniqId, id, dialogOpen, handleCloseDialog, selectedDate, doctorsAvailability, setSelectedStartTime, handleBooking }) {\r\n    const [selectedDoctorInfo, setSelectedDoctorInfo] = useState(null);\r\n    const [displayStartDate, setDisplayStartDate] = useState(new Date(selectedDate));\r\n    const displayEndDate = new Date(displayStartDate.getTime() + 7 * 24 * 60 * 60 * 1000); // 7 days later\r\n\r\n    useEffect(() => {\r\n        const doctorInfo = doctorsAvailability.find(doctor => doctor.doctorId === doctorUniqId);\r\n        setSelectedDoctorInfo(doctorInfo);\r\n\r\n        // Update displayStartDate based on the selectedDate\r\n        setDisplayStartDate(new Date(selectedDate));\r\n    }, [doctorsAvailability, doctorUniqId, selectedDate]);\r\n\r\n    const getAvailableSlotsForDate = (date) => {\r\n        if (selectedDoctorInfo) {\r\n            const availabilityItem = selectedDoctorInfo.availability.find(item => item.dates[0] === date);\r\n            return availabilityItem ? availabilityItem.startTimes : [];\r\n        }\r\n        return [];\r\n    };\r\n\r\n    const convertTo12HourFormat = (time) => {\r\n        const [hours, minutes] = time.split(\":\");\r\n        const parsedHours = parseInt(hours, 10);\r\n        const ampm = parsedHours >= 12 ? \"PM\" : \"AM\";\r\n        const twelveHour = parsedHours % 12 || 12;\r\n        return `${twelveHour}:${minutes} ${ampm}`;\r\n    };\r\n\r\n    const formatSelectedDate = (startDate, endDate) => {\r\n        const startMonth = startDate.toLocaleString('en-US', { month: 'short' });\r\n        const startDay = startDate.getDate();\r\n        const endMonth = endDate.toLocaleString('en-US', { month: 'short' });\r\n        const endDay = endDate.getDate();\r\n        return `${startMonth} ${startDay} to ${endMonth} ${endDay}`;\r\n    };\r\n\r\n    const isDateAvailable = (date) => {\r\n        return selectedDoctorInfo.availability.some(item => item.dates[0] === date);\r\n    };\r\nconsole.log(isDateAvailable);\r\n\r\n    return (\r\n         <div>\r\n            <Dialog open={dialogOpen} onClose={handleCloseDialog} fullWidth>\r\n                <DialogTitle style={{ margin: \"1rem\", borderBottom: \"2px grey solid\", display: \"flex\", alignItems: \"center\" }}>\r\n                    {/* ... (avatar and doctor info) */}\r\n                </DialogTitle>\r\n                <DialogContent style={{ margin: \"1rem\" }}>\r\n                    {selectedDoctorInfo && Array.from({ length: 7 }, (_, index) => {\r\n                        const currentDate = new Date(selectedDate);\r\n                        currentDate.setDate(currentDate.getDate() + index);\r\n\r\n                        const formattedDate = currentDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n                        const availability = getAvailableSlotsForDate(formattedDate);\r\n\r\n                        return (\r\n                            <div key={index}>\r\n                                <Typography style={{ fontSize: '15px' }} variant=\"body2\">\r\n                                    {formattedDate}\r\n                                </Typography>\r\n                                {availability.length > 0 ? (\r\n                                    availability.map((startTime, slotIndex) => (\r\n                                        <Chip\r\n                                            style={{ padding: \"0.5rem\", fontSize: \"15px\", borderRadius: \"2px\", margin: '0.3rem', background: \"yellow\" }}\r\n                                            key={slotIndex}\r\n                                            label={convertTo12HourFormat(startTime)} // Convert time to 12-hour format\r\n                                            className=\"mt-2\"\r\n                                            onClick={() => {\r\n                                                setSelectedStartTime(startTime);\r\n                                                handleBooking(doctorUniqId, id, formattedDate, startTime);\r\n                                            }}\r\n                                        />\r\n                                    ))\r\n                                ) : (\r\n                                    <Typography variant=\"body2\" style={{ color: \"grey\" }}>\r\n                                        No Availability\r\n                                    </Typography>\r\n                                )}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </DialogContent>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}