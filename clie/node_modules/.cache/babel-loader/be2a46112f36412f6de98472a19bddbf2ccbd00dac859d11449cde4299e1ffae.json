{"ast":null,"code":"var _jsxFileName = \"C:\\\\saran\\\\healthCare\\\\healthcare\\\\c\\\\clie\\\\src\\\\components\\\\PatientContainers\\\\PatientsBooking.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Card, CardContent, Chip, Container, Typography } from '@mui/material';\nimport ApptDialog from './Dialog/ApptDialog';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PatientsBooking() {\n  _s();\n  const [doctorsAvailability, setDoctorsAvailability] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [selectedStartTimes, setSelectedStartTimes] = useState([]);\n  const [selectedStartTime, setSelectedStartTime] = useState(null);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [doctorUniqId, setDoctorUniqId] = useState(null);\n  console.log(doctorUniqId, \"sie\");\n  const {\n    id\n  } = JSON.parse(sessionStorage.getItem(\"user\"));\n  console.log(id, \"ok\");\n  useEffect(() => {\n    axios.get('http://localhost:5000/api/v3/getAvailability').then(response => {\n      setDoctorsAvailability(response.data);\n    }).catch(error => {\n      console.error('Error fetching doctors availability:', error);\n    });\n  }, []);\n  const handleBooking = (doctorUniqId, id) => {\n    if (selectedDate && selectedStartTime) {\n      // Format selectedDate to \"YYYY-MM-DD\"\n      const formattedDate = selectedDate.toISOString().split('T')[0];\n      console.log(formattedDate);\n\n      // Use selectedStartTime directly (assuming it's a string in \"HH:mm\" format)\n      const formattedTime = selectedStartTime;\n\n      // Combine formattedDate and formattedTime to create the timeslot string\n      const timeslot = `${formattedDate} ${formattedTime}:00`;\n      const requestData = {\n        doctorId: doctorUniqId,\n        patientId: id,\n        timeslot: timeslot\n      };\n      console.log(requestData, \"requestData\");\n      axios.post('http://localhost:5000/api/v3/bookAppointment', requestData).then(response => {\n        console.log('Appointment booked successfully:', response.data.message);\n        // Handle UI updates after successful booking if needed.\n      }).catch(error => {\n        console.error('Error booking appointment:', error);\n        // Handle error scenario, update UI accordingly.\n      });\n    }\n  };\n\n  const handleChipClick = (date, startTimes, doctorId) => {\n    setSelectedDate(date);\n    setSelectedStartTimes(startTimes);\n    setDoctorUniqId(doctorId);\n    setSelectedStartTime(null); // Reset selected start time\n    setDialogOpen(true);\n  };\n  const handleCloseDialog = () => {\n    setDialogOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: doctorsAvailability.map(doctor => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          style: {\n            height: '100%'\n          },\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"d-flex justify-content-between mb-3\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h6\",\n                  children: [\"Dr. \", doctor.doctorName]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 92,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body1\",\n                  children: doctor.specialist\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-xl-12\",\n                children: doctor.availability.map((availabilityItem, index) => /*#__PURE__*/_jsxDEV(Chip, {\n                  label: new Date(availabilityItem.dates[0]).toLocaleDateString('en-US', {\n                    month: 'short',\n                    day: 'numeric'\n                  }),\n                  onClick: () => handleChipClick(availabilityItem.dates[0], availabilityItem.startTimes, doctor.doctorId),\n                  variant: \"outlined\",\n                  color: \"primary\",\n                  className: \"mt-2\"\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 99,\n                  columnNumber: 45\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this)\n      }, doctor.doctorName, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ApptDialog, {\n      dialogOpen: dialogOpen,\n      selectedDate: selectedDate,\n      setSelectedStartTime: setSelectedStartTime,\n      selectedStartTimes: selectedStartTimes,\n      selectedStartTime: selectedStartTime,\n      doctorUniqId: doctorUniqId,\n      id: id,\n      handleCloseDialog: handleCloseDialog,\n      handleBooking: handleBooking\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n}\n_s(PatientsBooking, \"xU4/BhYf6MK5xNbnV7DJHxZDgx0=\");\n_c = PatientsBooking;\nexport default PatientsBooking;\nvar _c;\n$RefreshReg$(_c, \"PatientsBooking\");","map":{"version":3,"names":["React","useState","useEffect","axios","Card","CardContent","Chip","Container","Typography","ApptDialog","jsxDEV","_jsxDEV","PatientsBooking","_s","doctorsAvailability","setDoctorsAvailability","selectedDate","setSelectedDate","selectedStartTimes","setSelectedStartTimes","selectedStartTime","setSelectedStartTime","dialogOpen","setDialogOpen","doctorUniqId","setDoctorUniqId","console","log","id","JSON","parse","sessionStorage","getItem","get","then","response","data","catch","error","handleBooking","formattedDate","toISOString","split","formattedTime","timeslot","requestData","doctorId","patientId","post","message","handleChipClick","date","startTimes","handleCloseDialog","maxWidth","children","map","doctor","className","style","height","variant","doctorName","fileName","_jsxFileName","lineNumber","columnNumber","specialist","availability","availabilityItem","index","label","Date","dates","toLocaleDateString","month","day","onClick","color","_c","$RefreshReg$"],"sources":["C:/saran/healthCare/healthcare/c/clie/src/components/PatientContainers/PatientsBooking.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    Chip,\r\n    Container,\r\n    Typography,\r\n\r\n} from '@mui/material';\r\nimport ApptDialog from './Dialog/ApptDialog';\r\n\r\nfunction PatientsBooking() {\r\n    const [doctorsAvailability, setDoctorsAvailability] = useState([]);\r\n    const [selectedDate, setSelectedDate] = useState(null);\r\n    const [selectedStartTimes, setSelectedStartTimes] = useState([]);\r\n    const [selectedStartTime, setSelectedStartTime] = useState(null);\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [doctorUniqId, setDoctorUniqId] = useState(null);\r\n\r\n    console.log(doctorUniqId, \"sie\");\r\n\r\n\r\n    const { id } = JSON.parse(sessionStorage.getItem(\"user\"));\r\n    console.log(id, \"ok\");\r\n\r\n\r\n    useEffect(() => {\r\n        axios.get('http://localhost:5000/api/v3/getAvailability')\r\n            .then(response => {\r\n                setDoctorsAvailability(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error('Error fetching doctors availability:', error);\r\n            });\r\n    }, []);\r\n\r\n    const handleBooking = (doctorUniqId, id) => {\r\n        if (selectedDate && selectedStartTime) {\r\n            // Format selectedDate to \"YYYY-MM-DD\"\r\n            const formattedDate = selectedDate.toISOString().split('T')[0];\r\n    console.log(formattedDate);\r\n            \r\n            // Use selectedStartTime directly (assuming it's a string in \"HH:mm\" format)\r\n            const formattedTime = selectedStartTime;\r\n    \r\n            // Combine formattedDate and formattedTime to create the timeslot string\r\n            const timeslot = `${formattedDate} ${formattedTime}:00`;\r\n    \r\n            const requestData = {\r\n                doctorId: doctorUniqId,\r\n                patientId: id,\r\n                timeslot: timeslot,\r\n            };\r\n    \r\n            console.log(requestData, \"requestData\");\r\n    \r\n            axios.post('http://localhost:5000/api/v3/bookAppointment', requestData)\r\n                .then(response => {\r\n                    console.log('Appointment booked successfully:', response.data.message);\r\n                    // Handle UI updates after successful booking if needed.\r\n                })\r\n                .catch(error => {\r\n                    console.error('Error booking appointment:', error);\r\n                    // Handle error scenario, update UI accordingly.\r\n                });\r\n        }\r\n    };\r\n    \r\n\r\n    const handleChipClick = (date, startTimes, doctorId) => {\r\n        setSelectedDate(date);\r\n        setSelectedStartTimes(startTimes);\r\n        setDoctorUniqId(doctorId);\r\n        setSelectedStartTime(null); // Reset selected start time\r\n        setDialogOpen(true);\r\n    };\r\n\r\n    const handleCloseDialog = () => {\r\n        setDialogOpen(false);\r\n    };\r\n\r\n    return (\r\n        <Container maxWidth=\"md\">\r\n            <div>\r\n                {doctorsAvailability.map(doctor => (\r\n                    <div key={doctor.doctorName} className=\"mb-4\">\r\n                        <Card style={{ height: '100%' }}>\r\n                            <CardContent>\r\n                                <div className=\"d-flex justify-content-between mb-3\">\r\n                                    <div>\r\n                                        <Typography variant=\"h6\">Dr. {doctor.doctorName}</Typography>\r\n                                        <Typography variant=\"body1\">{doctor.specialist}</Typography>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-xl-12\">\r\n                                        {doctor.availability.map((availabilityItem, index) => (\r\n                                            <Chip\r\n                                                key={index}\r\n                                                label={new Date(availabilityItem.dates[0]).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\r\n                                                onClick={() => handleChipClick(availabilityItem.dates[0], availabilityItem.startTimes, doctor.doctorId)}\r\n                                                variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                className=\"mt-2\"\r\n                                            />\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <ApptDialog\r\n                dialogOpen={dialogOpen}\r\n                selectedDate={selectedDate}\r\n                setSelectedStartTime={setSelectedStartTime}\r\n                selectedStartTimes={selectedStartTimes}\r\n                selectedStartTime={selectedStartTime}\r\n                doctorUniqId={doctorUniqId}\r\n                id={id}\r\n                handleCloseDialog={handleCloseDialog}\r\n                handleBooking={handleBooking} />\r\n\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default PatientsBooking;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}