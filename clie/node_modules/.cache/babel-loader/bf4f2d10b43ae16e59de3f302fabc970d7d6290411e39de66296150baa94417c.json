{"ast":null,"code":"var _jsxFileName = \"C:\\\\saran\\\\healthCare\\\\healthcare\\\\c\\\\clie\\\\src\\\\components\\\\PatientContainers\\\\PatientsBooking.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Card, CardContent, Chip, Container, Typography } from '@mui/material';\nimport ApptDialog from './Dialog/ApptDialog';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction PatientsBooking() {\n  _s();\n  const [doctorsAvailability, setDoctorsAvailability] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [selectedStartTimes, setSelectedStartTimes] = useState([]);\n  const [selectedStartTime, setSelectedStartTime] = useState(null);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [selectedDoctorName, setSelectedDoctorName] = useState(\"\");\n  const {\n    id\n  } = JSON.parse(sessionStorage.getItem(\"user\"));\n  // console.log(selectedDoctorName, \"ok\");\n\n  useEffect(() => {\n    axios.get('http://localhost:5000/api/v3/getAvailability').then(response => {\n      setDoctorsAvailability(response.data);\n    }).catch(error => {\n      console.error('Error fetching doctors availability:', error);\n    });\n  }, []);\n  const handleBooking = (doctorId, id) => {\n    if (selectedDate && selectedStartTime) {\n      const timeslot = `${selectedDate} ${selectedStartTime}:00`;\n      const requestData = {\n        doctorId: doctorId,\n        patientId: id,\n        timeslot: timeslot\n      };\n      console.log(requestData, \"requestData\");\n      axios.post('http://localhost:5000/api/v3/bookAppointment', requestData).then(response => {\n        console.log('Appointment booked successfully:', response.data.message);\n        // Handle UI updates after successful booking if needed.\n      }).catch(error => {\n        console.error('Error booking appointment:', error);\n      });\n    }\n  };\n  const handleChipClick = (date, startTimes, doctorName) => {\n    setSelectedDate(date);\n    setSelectedStartTimes(startTimes);\n    setSelectedStartTime(null); // Reset selected start time\n    setDialogOpen(true);\n    setSelectedDoctorName(doctorName);\n  };\n  const handleCloseDialog = () => {\n    setDialogOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: doctorsAvailability.map(doctor => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(Card, {\n          style: {\n            height: '100%'\n          },\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"d-flex justify-content-between mb-3\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h6\",\n                  children: [\"Dr. \", doctor.doctorName]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 79,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body1\",\n                  children: doctor.specialist\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 80,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-xl-12\",\n                children: doctor.availability.map((availabilityItem, index) => /*#__PURE__*/_jsxDEV(Chip, {\n                  style: {\n                    padding: \"1.6rem\",\n                    borderRadius: \"6px\",\n                    margin: '0.5rem',\n                    background: \"yellow\"\n                  },\n                  sx: {\n                    borderRadius: '0'\n                  },\n                  label: /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [\"  \", new Date(availabilityItem.dates[0]).toLocaleDateString('en-US', {\n                      month: 'short',\n                      day: 'numeric'\n                    }), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 91,\n                      columnNumber: 53\n                    }, this), availabilityItem.startTimes.length, \" Appts \"]\n                  }, void 0, true),\n                  onClick: () => handleChipClick(availabilityItem.dates[0], availabilityItem.startTimes, doctor.doctorId),\n                  className: \"mt-2\"\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 45\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(ApptDialog, {\n          dialogOpen: dialogOpen,\n          selectedDate: selectedDate,\n          setSelectedStartTime: setSelectedStartTime,\n          selectedStartTimes: selectedStartTimes,\n          selectedStartTime: selectedStartTime,\n          id: id,\n          docId: doctor.doctorId,\n          handleCloseDialog: handleCloseDialog,\n          doctorsAvailability: doctorsAvailability,\n          handleBooking: handleBooking\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }, this)]\n      }, doctor.doctorName, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n}\n_s(PatientsBooking, \"EfG+Y/Hq2tQO6NmmuNZxAnDanpU=\");\n_c = PatientsBooking;\nexport default PatientsBooking;\nvar _c;\n$RefreshReg$(_c, \"PatientsBooking\");","map":{"version":3,"names":["React","useState","useEffect","axios","Card","CardContent","Chip","Container","Typography","ApptDialog","jsxDEV","_jsxDEV","Fragment","_Fragment","PatientsBooking","_s","doctorsAvailability","setDoctorsAvailability","selectedDate","setSelectedDate","selectedStartTimes","setSelectedStartTimes","selectedStartTime","setSelectedStartTime","dialogOpen","setDialogOpen","selectedDoctorName","setSelectedDoctorName","id","JSON","parse","sessionStorage","getItem","get","then","response","data","catch","error","console","handleBooking","doctorId","timeslot","requestData","patientId","log","post","message","handleChipClick","date","startTimes","doctorName","handleCloseDialog","maxWidth","children","map","doctor","className","style","height","variant","fileName","_jsxFileName","lineNumber","columnNumber","specialist","availability","availabilityItem","index","padding","borderRadius","margin","background","sx","label","Date","dates","toLocaleDateString","month","day","length","onClick","docId","_c","$RefreshReg$"],"sources":["C:/saran/healthCare/healthcare/c/clie/src/components/PatientContainers/PatientsBooking.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    Chip,\r\n    Container,\r\n    Typography,\r\n\r\n} from '@mui/material';\r\nimport ApptDialog from './Dialog/ApptDialog';\r\n\r\nfunction PatientsBooking() {\r\n    const [doctorsAvailability, setDoctorsAvailability] = useState([]);\r\n    const [selectedDate, setSelectedDate] = useState(null);\r\n    const [selectedStartTimes, setSelectedStartTimes] = useState([]);\r\n    const [selectedStartTime, setSelectedStartTime] = useState(null);\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [selectedDoctorName, setSelectedDoctorName] = useState(\"\");\r\n    const { id } = JSON.parse(sessionStorage.getItem(\"user\"));\r\n    // console.log(selectedDoctorName, \"ok\");\r\n\r\n\r\n    useEffect(() => {\r\n        axios.get('http://localhost:5000/api/v3/getAvailability')\r\n            .then(response => {\r\n                setDoctorsAvailability(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error('Error fetching doctors availability:', error);\r\n            });\r\n    }, []);\r\n\r\n    const handleBooking = (doctorId, id) => {\r\n        if (selectedDate && selectedStartTime) {\r\n            const timeslot = `${selectedDate} ${selectedStartTime}:00`;\r\n            const requestData = {\r\n                doctorId: doctorId,\r\n                patientId: id,\r\n                timeslot: timeslot,\r\n            };\r\n\r\n            console.log(requestData, \"requestData\");\r\n\r\n            axios.post('http://localhost:5000/api/v3/bookAppointment', requestData)\r\n                .then(response => {\r\n                    console.log('Appointment booked successfully:', response.data.message);\r\n                    // Handle UI updates after successful booking if needed.\r\n                })\r\n                .catch(error => {\r\n                    console.error('Error booking appointment:', error);\r\n                });\r\n        }\r\n    };\r\n\r\n\r\n    const handleChipClick = (date, startTimes, doctorName) => {\r\n        setSelectedDate(date);\r\n        setSelectedStartTimes(startTimes);\r\n        setSelectedStartTime(null); // Reset selected start time\r\n        setDialogOpen(true);\r\n        setSelectedDoctorName(doctorName);\r\n  \r\n    };\r\n\r\n    const handleCloseDialog = () => {\r\n        setDialogOpen(false);\r\n    };\r\n\r\n    return (\r\n        <Container maxWidth=\"md\">\r\n            <div>\r\n                {doctorsAvailability.map(doctor => (\r\n                    <div key={doctor.doctorName} className=\"mb-4\">\r\n                        <Card style={{ height: '100%' }}>\r\n                            <CardContent>\r\n                                <div className=\"d-flex justify-content-between mb-3\">\r\n                                    <div>\r\n                                        <Typography variant=\"h6\">Dr. {doctor.doctorName}</Typography>\r\n                                        <Typography variant=\"body1\">{doctor.specialist}</Typography>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-xl-12\">\r\n                                        {doctor.availability.map((availabilityItem, index) => (\r\n                                            <Chip\r\n                                                style={{ padding: \"1.6rem\", borderRadius: \"6px\", margin: '0.5rem', background: \"yellow\" }}\r\n                                                sx={{ borderRadius: '0' }}\r\n                                                key={index}\r\n                                                label={<>  {new Date(availabilityItem.dates[0]).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\r\n                                                    <br />\r\n                                                    {availabilityItem.startTimes.length} Appts </>}\r\n                                                onClick={() => handleChipClick(availabilityItem.dates[0], availabilityItem.startTimes, doctor.doctorId)}\r\n                                                className=\"mt-2\"\r\n                                            />\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n                            </CardContent>\r\n                        </Card>\r\n                        <ApptDialog\r\n                            dialogOpen={dialogOpen}\r\n                            selectedDate={selectedDate}\r\n                            setSelectedStartTime={setSelectedStartTime}\r\n                            selectedStartTimes={selectedStartTimes}\r\n                            selectedStartTime={selectedStartTime}\r\n                            id={id}\r\n                            docId={doctor.doctorId}\r\n                            handleCloseDialog={handleCloseDialog}\r\n                            doctorsAvailability={doctorsAvailability}\r\n                            handleBooking={handleBooking} />\r\n                            \r\n\r\n\r\n                    </div>\r\n\r\n                ))}\r\n            </div>\r\n\r\n\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default PatientsBooking;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}