{"ast":null,"code":"var _jsxFileName = \"C:\\\\saran\\\\healthCare\\\\healthcare\\\\c\\\\clie\\\\src\\\\components\\\\PatientContainers\\\\Dialog\\\\ApptDialog.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Dialog, DialogContent, DialogTitle, Typography, Chip, DialogContentText } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ApptDialog({\n  selectedStartTimes,\n  scroll,\n  docId,\n  doctorUniqId,\n  id,\n  dialogOpen,\n  handleCloseDialog,\n  selectedDate,\n  doctorsAvailability,\n  setSelectedStartTime,\n  handleBooking\n}) {\n  _s();\n  console.log(docId);\n  const [getDoctors, setGetdoctors] = useState({});\n  useEffect(() => {\n    const AllDoctors = doctorsAvailability === null || doctorsAvailability === void 0 ? void 0 : doctorsAvailability.find(e => e.doctorId === docId);\n    setGetdoctors(AllDoctors);\n  }, []);\n  const descriptionElementRef = React.useRef(null);\n  useEffect(() => {\n    if (dialogOpen) {\n      const {\n        current: descriptionElement\n      } = descriptionElementRef;\n      if (descriptionElement !== null) {\n        descriptionElement.focus();\n      }\n    }\n  }, [dialogOpen]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Dialog, {\n      dialogOpen: dialogOpen,\n      onClose: handleCloseDialog,\n      scroll: scroll,\n      \"aria-labelledby\": \"scroll-dialog-title\",\n      \"aria-describedby\": \"scroll-dialog-description\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"scroll-dialog-title\",\n        children: \"Subscribe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        dividers: scroll === 'paper',\n        children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n          id: \"scroll-dialog-description\",\n          ref: descriptionElementRef,\n          tabIndex: -1,\n          children: [...new Array(50)].map(() => `Cras mattis consectetur purus sit amet fermentum.\nCras justo odio, dapibus ac facilisis in, egestas eget quam.\nMorbi leo risus, porta ac consectetur ac, vestibulum at eros.\nPraesent commodo cursus magna, vel scelerisque nisl consectetur et.`).join('\\n')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 1\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n}\n\n// import * as React from 'react';\n// import Button from '@mui/material/Button';\n// import Dialog from '@mui/material/Dialog';\n// import DialogActions from '@mui/material/DialogActions';\n// import DialogContent from '@mui/material/DialogContent';\n// import DialogContentText from '@mui/material/DialogContentText';\n// import DialogTitle from '@mui/material/DialogTitle';\n\n// export default function ScrollDialog() {\n//   const [open, setOpen] = React.useState(false);\n//   const [scroll, setScroll] = React.useState('paper');\n\n//   const handleClickOpen = (scrollType) => () => {\n//     setOpen(true);\n//     setScroll(scrollType);\n//   };\n\n//   const handleClose = () => {\n//     setOpen(false);\n//   };\n\n//   const descriptionElementRef = React.useRef(null);\n//   React.useEffect(() => {\n//     if (open) {\n//       const { current: descriptionElement } = descriptionElementRef;\n//       if (descriptionElement !== null) {\n//         descriptionElement.focus();\n//       }\n//     }\n//   }, [open]);\n\n//   return (\n//     <div>\n//       <Button onClick={handleClickOpen('paper')}>scroll=paper</Button>\n\n//     </div>\n//   );\n// }\n_s(ApptDialog, \"XQRP9Tsl+scN+9Xucbh6HrAIwmc=\");\n_c = ApptDialog;\nvar _c;\n$RefreshReg$(_c, \"ApptDialog\");","map":{"version":3,"names":["React","useEffect","useState","Dialog","DialogContent","DialogTitle","Typography","Chip","DialogContentText","jsxDEV","_jsxDEV","ApptDialog","selectedStartTimes","scroll","docId","doctorUniqId","id","dialogOpen","handleCloseDialog","selectedDate","doctorsAvailability","setSelectedStartTime","handleBooking","_s","console","log","getDoctors","setGetdoctors","AllDoctors","find","e","doctorId","descriptionElementRef","useRef","current","descriptionElement","focus","children","onClose","fileName","_jsxFileName","lineNumber","columnNumber","dividers","ref","tabIndex","Array","map","join","_c","$RefreshReg$"],"sources":["C:/saran/healthCare/healthcare/c/clie/src/components/PatientContainers/Dialog/ApptDialog.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {\r\n    Dialog,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Typography,\r\n    Chip,\r\n    DialogContentText,\r\n} from '@mui/material';\r\nexport default function ApptDialog({ selectedStartTimes,scroll, docId,doctorUniqId, id, dialogOpen, handleCloseDialog, selectedDate, doctorsAvailability, setSelectedStartTime, handleBooking }) {\r\nconsole.log(docId);\r\n    const [getDoctors, setGetdoctors] = useState({})\r\n\r\n    useEffect(() => {\r\n        const AllDoctors = doctorsAvailability?.find((e) => e.doctorId === docId)\r\n        setGetdoctors(AllDoctors);\r\n    \r\n      }, []);\r\n\r\n      const descriptionElementRef = React.useRef(null);\r\n      useEffect(() => {\r\n        if (dialogOpen) {\r\n          const { current: descriptionElement } = descriptionElementRef;\r\n          if (descriptionElement !== null) {\r\n            descriptionElement.focus();\r\n          }\r\n        }\r\n      }, [dialogOpen]);\r\n\r\n  \r\n    return (\r\n        <div>\r\n\r\n\r\n\r\n\r\n\r\n \r\n<Dialog\r\n        dialogOpen={dialogOpen}\r\n        onClose={handleCloseDialog}\r\n        scroll={scroll}\r\n        aria-labelledby=\"scroll-dialog-title\"\r\n        aria-describedby=\"scroll-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"scroll-dialog-title\">Subscribe</DialogTitle>\r\n        <DialogContent dividers={scroll === 'paper'}>\r\n          <DialogContentText\r\n            id=\"scroll-dialog-description\"\r\n            ref={descriptionElementRef}\r\n            tabIndex={-1}\r\n          >\r\n            {[...new Array(50)]\r\n              .map(\r\n                () => `Cras mattis consectetur purus sit amet fermentum.\r\nCras justo odio, dapibus ac facilisis in, egestas eget quam.\r\nMorbi leo risus, porta ac consectetur ac, vestibulum at eros.\r\nPraesent commodo cursus magna, vel scelerisque nisl consectetur et.`,\r\n              )\r\n              .join('\\n')}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n\r\n      </Dialog>\r\n\r\n\r\n            {/* <Dialog open={dialogOpen} onClose={handleCloseDialog} minWidth=\"md\" fullWidth >\r\n                <DialogTitle style={{ fontSize: '15px', fontWeight:\"550\" }}>Dr.{getDoctors.doctorName}</DialogTitle>\r\n        <p>{getDoctors.specialist}</p>\r\n                <DialogContent>\r\n                    <Typography variant=\"body2\" style={{ color: \"grey\" }}>Selected Date: {selectedDate}</Typography>\r\n                    <Typography variant=\"body2\" style={{ color: \"grey\" }}>Available Start Times:</Typography>\r\n                    {selectedStartTimes.map((startTime, index) => (\r\n                        <Chip\r\n                            key={index}\r\n                            label={startTime}\r\n                            variant=\"outlined\"\r\n                            color=\"primary\"\r\n                            className=\"mt-2\"\r\n                            onClick={() => {\r\n                                setSelectedStartTime(startTime);\r\n                                handleBooking(doctorUniqId, id);\r\n                            }}\r\n                        />\r\n                    ))}\r\n                </DialogContent>\r\n            </Dialog> */}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n// import * as React from 'react';\r\n// import Button from '@mui/material/Button';\r\n// import Dialog from '@mui/material/Dialog';\r\n// import DialogActions from '@mui/material/DialogActions';\r\n// import DialogContent from '@mui/material/DialogContent';\r\n// import DialogContentText from '@mui/material/DialogContentText';\r\n// import DialogTitle from '@mui/material/DialogTitle';\r\n\r\n// export default function ScrollDialog() {\r\n//   const [open, setOpen] = React.useState(false);\r\n//   const [scroll, setScroll] = React.useState('paper');\r\n\r\n//   const handleClickOpen = (scrollType) => () => {\r\n//     setOpen(true);\r\n//     setScroll(scrollType);\r\n//   };\r\n\r\n//   const handleClose = () => {\r\n//     setOpen(false);\r\n//   };\r\n\r\n//   const descriptionElementRef = React.useRef(null);\r\n//   React.useEffect(() => {\r\n//     if (open) {\r\n//       const { current: descriptionElement } = descriptionElementRef;\r\n//       if (descriptionElement !== null) {\r\n//         descriptionElement.focus();\r\n//       }\r\n//     }\r\n//   }, [open]);\r\n\r\n//   return (\r\n//     <div>\r\n//       <Button onClick={handleClickOpen('paper')}>scroll=paper</Button>\r\n\r\n//     </div>\r\n//   );\r\n// }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}