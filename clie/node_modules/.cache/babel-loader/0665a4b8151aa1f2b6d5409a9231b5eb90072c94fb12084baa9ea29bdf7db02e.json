{"ast":null,"code":"var _jsxFileName = \"C:\\\\saran\\\\healthCare\\\\healthcare\\\\c\\\\clie\\\\src\\\\components\\\\DoctorContainers\\\\Slots.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, Chip, Container, Dialog, DialogContent, DialogTitle, Grid, Typography } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Slots({\n  availability,\n  doctorAppointments,\n  formatAppointmentTime\n}) {\n  _s();\n  const [selectedSlot, setSelectedSlot] = useState(null);\n  const [openDialog, setOpenDialog] = useState(false);\n  const [selectedPatientTime, setSelectedPatientTime] = useState(null);\n  console.log(selectedPatientTime);\n  const handleClickChip = slot => {\n    setSelectedSlot(slot);\n    setOpenDialog(true);\n    const formattedSlot = slot; // Format slot to match booktime format\n    console.log('Formatted Slot:', formattedSlot);\n    const matchingAppointment = doctorAppointments === null || doctorAppointments === void 0 ? void 0 : doctorAppointments.find(appointment => appointment.booktime === \"5:24 PM\");\n    console.log('Matching Appointment:', matchingAppointment);\n    console.log('Appointment Times:', doctorAppointments === null || doctorAppointments === void 0 ? void 0 : doctorAppointments.map(appointment => appointment.booktime === \"5:24 PM\"));\n    // console.log('Patient Time:', patientTime);\n\n    setSelectedPatientTime(matchingAppointment ? formatAppointmentTime(matchingAppointment.booktime) : 'No appointment booked');\n  };\n  const handleCloseDialog = () => {\n    setSelectedSlot(null);\n    setSelectedPatientTime(null);\n    setOpenDialog(false);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: availability.map((item, index) => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          style: {\n            height: '100%'\n          },\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n              align: \"left\",\n              children: [\"Date: \", item.dates[0]]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                color: 'grey',\n                fontSize: '13px'\n              },\n              align: \"left\",\n              children: \"Upcoming Appointments\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: item.startTimes.map((startTime, timeIndex) => {\n                const formattedStartTime = formatAppointmentTime(startTime); // Format startTime to match booktime format\n                const isBooked = doctorAppointments.some(appointment => formatAppointmentTime(appointment.booktime) === formattedStartTime);\n                return /*#__PURE__*/_jsxDEV(Chip, {\n                  label: startTime,\n                  variant: isBooked ? 'default' : 'outlined',\n                  color: isBooked ? 'primary' : 'default',\n                  className: \"mt-2\",\n                  onClick: () => handleClickChip(startTime)\n                }, timeIndex, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 53,\n                  columnNumber: 45\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openDialog,\n      onClose: handleCloseDialog,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Selected Slot Information\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          children: [selectedSlot ? `You clicked on the slot: ${selectedSlot}` : 'No slot selected', /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 3\n          }, this), selectedPatientTime && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: selectedPatientTime === 'No appointment booked' ? selectedPatientTime : `Patient Booking Time: ${selectedPatientTime}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n}\n_s(Slots, \"8vv7fkByhS3bYXGOg6aeEkHZM2k=\");\n_c = Slots;\nexport default Slots;\nvar _c;\n$RefreshReg$(_c, \"Slots\");","map":{"version":3,"names":["React","useState","useEffect","Card","CardContent","Chip","Container","Dialog","DialogContent","DialogTitle","Grid","Typography","jsxDEV","_jsxDEV","Slots","availability","doctorAppointments","formatAppointmentTime","_s","selectedSlot","setSelectedSlot","openDialog","setOpenDialog","selectedPatientTime","setSelectedPatientTime","console","log","handleClickChip","slot","formattedSlot","matchingAppointment","find","appointment","booktime","map","handleCloseDialog","maxWidth","children","container","spacing","item","index","xs","sm","md","style","height","align","dates","fileName","_jsxFileName","lineNumber","columnNumber","color","fontSize","startTimes","startTime","timeIndex","formattedStartTime","isBooked","some","label","variant","className","onClick","open","onClose","_c","$RefreshReg$"],"sources":["C:/saran/healthCare/healthcare/c/clie/src/components/DoctorContainers/Slots.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, Chip, Container, Dialog, DialogContent, DialogTitle, Grid, Typography } from '@mui/material';\r\n\r\nfunction Slots({ availability, doctorAppointments, formatAppointmentTime }) {\r\n    const [selectedSlot, setSelectedSlot] = useState(null);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [selectedPatientTime, setSelectedPatientTime] = useState(null);\r\nconsole.log(selectedPatientTime);\r\n    const handleClickChip = (slot) => {\r\n        setSelectedSlot(slot);\r\n        setOpenDialog(true);\r\n    \r\n        const formattedSlot = (slot); // Format slot to match booktime format\r\n        console.log('Formatted Slot:', formattedSlot);\r\n        \r\n        const matchingAppointment = doctorAppointments?.find(appointment =>\r\n     appointment.booktime === \"5:24 PM\"     \r\n\r\n        );\r\n    \r\n        console.log('Matching Appointment:', matchingAppointment);\r\n        console.log('Appointment Times:', doctorAppointments?.map(appointment => appointment.booktime === \"5:24 PM\"));\r\n        // console.log('Patient Time:', patientTime);\r\n    \r\n        setSelectedPatientTime(matchingAppointment ? formatAppointmentTime(matchingAppointment.booktime) : 'No appointment booked');\r\n    };\r\n    \r\n    const handleCloseDialog = () => {\r\n        setSelectedSlot(null);\r\n        setSelectedPatientTime(null);\r\n        setOpenDialog(false);\r\n    };\r\n\r\n    return (\r\n        <Container maxWidth=\"md\">\r\n            <Grid container spacing={3}>\r\n                {availability.map((item, index) => (\r\n                    <Grid key={index} item xs={12} sm={6} md={4}>\r\n                        <Card style={{ height: '100%' }}>\r\n                            <CardContent>\r\n                                <h6 align=\"left\">Date: {item.dates[0]}</h6>\r\n                                <p style={{ color: 'grey', fontSize: '13px' }} align=\"left\">\r\n                                    Upcoming Appointments\r\n                                </p>\r\n                                <div>\r\n                                    {item.startTimes.map((startTime, timeIndex) => {\r\n                                        const formattedStartTime = formatAppointmentTime(startTime); // Format startTime to match booktime format\r\n                                        const isBooked = doctorAppointments.some(appointment =>\r\n                                            formatAppointmentTime(appointment.booktime) === formattedStartTime\r\n                                        );\r\n\r\n                                        return (\r\n                                            <Chip\r\n                                                key={timeIndex}\r\n                                                label={startTime}\r\n                                                variant={isBooked ? 'default' : 'outlined'}\r\n                                                color={isBooked ? 'primary' : 'default'}\r\n                                                className=\"mt-2\"\r\n                                                onClick={() => handleClickChip(startTime)}\r\n                                            />\r\n                                        );\r\n                                    })}\r\n                                </div>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n            <Dialog open={openDialog} onClose={handleCloseDialog}>\r\n                <DialogTitle>Selected Slot Information</DialogTitle>\r\n                <DialogContent>\r\n                <Typography>\r\n  {selectedSlot ? `You clicked on the slot: ${selectedSlot}` : 'No slot selected'}\r\n  <br />\r\n  {selectedPatientTime && (\r\n    <div>\r\n      {selectedPatientTime === 'No appointment booked'\r\n        ? selectedPatientTime\r\n        : `Patient Booking Time: ${selectedPatientTime}`}\r\n    </div>\r\n  )}\r\n</Typography>\r\n\r\n                </DialogContent>\r\n            </Dialog>\r\n\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Slots;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}