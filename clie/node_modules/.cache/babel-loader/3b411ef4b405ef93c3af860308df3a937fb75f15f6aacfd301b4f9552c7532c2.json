{"ast":null,"code":"var _jsxFileName = \"C:\\\\saran\\\\healthCare\\\\healthcare\\\\c\\\\clie\\\\src\\\\components\\\\DoctorContainers\\\\Slots.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, Chip, Container, Dialog, DialogContent, DialogTitle, Grid, Typography } from '@mui/material';\nimport Badge from '@mui/material/Badge';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Slots({\n  availability,\n  doctorAppointments,\n  formatAppointmentTime\n}) {\n  _s();\n  const [selectedSlot, setSelectedSlot] = useState(null);\n  const [openDialog, setOpenDialog] = useState(false);\n  const [selectedPatientTime, setSelectedPatientTime] = useState(null);\n  const handleClickChip = slot => {\n    setSelectedSlot(slot);\n    setOpenDialog(true);\n    const formattedSlot = slot; // Format slot to match booktime format\n    const matchingAppointments = doctorAppointments === null || doctorAppointments === void 0 ? void 0 : doctorAppointments.filter(appointment => appointment.booktime === formattedSlot);\n    console.log('Formatted Slot:', formattedSlot);\n    console.log('Matching Appointments:', matchingAppointments);\n    console.log('Appointment Times:', doctorAppointments === null || doctorAppointments === void 0 ? void 0 : doctorAppointments.map(appointment => appointment.booktime));\n    console.log('Matching Appointments:', matchingAppointments.length);\n    setSelectedPatientTime(matchingAppointments.length > 0 ? matchingAppointments.map(appointment => appointment.booktime).join(', ') : 'No appointment booked');\n  };\n  const handleCloseDialog = () => {\n    setSelectedSlot(null);\n    setSelectedPatientTime(null);\n    setOpenDialog(false);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: availability.map((item, index) => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        md: 11,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          style: {\n            height: '100%'\n          },\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n              align: \"left\",\n              children: [\"Date: \", item.dates[0]]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                color: 'grey',\n                fontSize: '13px'\n              },\n              align: \"left\",\n              children: \"Upcoming Appointments\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                maxWidth: \"100%\",\n                overflowX: \"auto\"\n              },\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  display: \"flex\",\n                  flexDirection: \"row\",\n                  flexWrap: \"nowrap\"\n                },\n                children: item.startTimes.map((startTime, timeIndex) => {\n                  const formattedStartTime = startTime; // Format startTime to match booktime format\n                  const isBooked = doctorAppointments.some(appointment => appointment.booktime === formattedStartTime);\n                  return /*#__PURE__*/_jsxDEV(Badge, {\n                    badgeContent: 4,\n                    color: \"primary\",\n                    children: /*#__PURE__*/_jsxDEV(Chip, {\n                      style: {\n                        padding: \"0.5rem\",\n                        fontSize: \"15px\",\n                        borderRadius: \"2px\",\n                        margin: \"0.3rem\",\n                        background: isBooked ? \"#2196f3\" : \"yellow\"\n                      },\n                      label: startTime,\n                      variant: isBooked ? \"secondary\" : \"outlined\",\n                      color: isBooked ? \"primary\" : \"default\",\n                      className: \"mt-2\",\n                      onClick: () => handleClickChip(startTime)\n                    }, timeIndex, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 60,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 59,\n                    columnNumber: 49\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openDialog,\n      onClose: handleCloseDialog,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Selected Slot Information\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          children: [selectedSlot ? `You clicked on the slot: ${selectedSlot}` : 'No slot selected', /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this), selectedPatientTime && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: selectedPatientTime === 'No appointment booked' ? selectedPatientTime : `Patient Booking Times: ${selectedPatientTime}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n_s(Slots, \"8vv7fkByhS3bYXGOg6aeEkHZM2k=\");\n_c = Slots;\nexport default Slots;\nvar _c;\n$RefreshReg$(_c, \"Slots\");","map":{"version":3,"names":["React","useState","useEffect","Card","CardContent","Chip","Container","Dialog","DialogContent","DialogTitle","Grid","Typography","Badge","jsxDEV","_jsxDEV","Slots","availability","doctorAppointments","formatAppointmentTime","_s","selectedSlot","setSelectedSlot","openDialog","setOpenDialog","selectedPatientTime","setSelectedPatientTime","handleClickChip","slot","formattedSlot","matchingAppointments","filter","appointment","booktime","console","log","map","length","join","handleCloseDialog","maxWidth","children","container","spacing","item","index","xs","sm","md","style","height","align","dates","fileName","_jsxFileName","lineNumber","columnNumber","color","fontSize","overflowX","display","flexDirection","flexWrap","startTimes","startTime","timeIndex","formattedStartTime","isBooked","some","badgeContent","padding","borderRadius","margin","background","label","variant","className","onClick","open","onClose","_c","$RefreshReg$"],"sources":["C:/saran/healthCare/healthcare/c/clie/src/components/DoctorContainers/Slots.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, Chip, Container, Dialog, DialogContent, DialogTitle, Grid, Typography } from '@mui/material';\r\nimport Badge from '@mui/material/Badge';\r\n\r\n\r\nfunction Slots({ availability, doctorAppointments, formatAppointmentTime }) {\r\n    const [selectedSlot, setSelectedSlot] = useState(null);\r\n    \r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [selectedPatientTime, setSelectedPatientTime] = useState(null);\r\n\r\n    const handleClickChip = (slot) => {\r\n        setSelectedSlot(slot);\r\n        setOpenDialog(true);\r\n\r\n        const formattedSlot = slot; // Format slot to match booktime format\r\n        const matchingAppointments = doctorAppointments?.filter(appointment =>\r\n            appointment.booktime === formattedSlot\r\n        );\r\n\r\n        console.log('Formatted Slot:', formattedSlot);\r\n        console.log('Matching Appointments:', matchingAppointments);\r\n        console.log('Appointment Times:', doctorAppointments?.map(appointment => appointment.booktime));\r\n\r\n        console.log('Matching Appointments:', matchingAppointments.length);\r\n\r\n\r\n        setSelectedPatientTime(matchingAppointments.length > 0\r\n            ? matchingAppointments.map(appointment => appointment.booktime).join(', ')\r\n            : 'No appointment booked');\r\n    };\r\n\r\n    const handleCloseDialog = () => {\r\n        setSelectedSlot(null);\r\n        setSelectedPatientTime(null);\r\n        setOpenDialog(false);\r\n    };\r\n\r\n    return (\r\n        <Container maxWidth=\"md\">\r\n            <Grid container spacing={3}>\r\n                {availability.map((item, index) => (\r\n                    <Grid key={index} item xs={12} sm={6} md={11}>\r\n                        <Card style={{ height: '100%' }}>\r\n                            <CardContent>\r\n                                <h6 align=\"left\">Date: {item.dates[0]}</h6>\r\n                                <p style={{ color: 'grey', fontSize: '13px' }} align=\"left\">\r\n                                    Upcoming Appointments\r\n                                </p>\r\n                                <div style={{ maxWidth: \"100%\", overflowX: \"auto\" }}>\r\n                                    <div style={{ display: \"flex\", flexDirection: \"row\", flexWrap: \"nowrap\" }}>\r\n                                        {item.startTimes.map((startTime, timeIndex) => {\r\n                                            const formattedStartTime = startTime; // Format startTime to match booktime format\r\n                                            const isBooked = doctorAppointments.some(\r\n                                                (appointment) => appointment.booktime === formattedStartTime\r\n                                            );\r\n\r\n                                            return (\r\n                                                <Badge badgeContent={4} color=\"primary\">\r\n                                                <Chip\r\n                                                    style={{\r\n                                                        padding: \"0.5rem\",\r\n                                                        fontSize: \"15px\",\r\n                                                        borderRadius: \"2px\",\r\n                                                        margin: \"0.3rem\",\r\n                                                        background: isBooked ? \"#2196f3\" : \"yellow\",\r\n                                                    }}\r\n                                                    key={timeIndex}\r\n                                                    label={startTime}\r\n                                                    variant={isBooked ? \"secondary\" : \"outlined\"}\r\n                                                    color={isBooked ? \"primary\" : \"default\"}\r\n                                                    className=\"mt-2\"\r\n                                                    onClick={() => handleClickChip(startTime)}\r\n                                                />\r\n                                                    </Badge>\r\n\r\n                                            );\r\n                                        })}\r\n                                    </div>\r\n                                </div>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n            <Dialog open={openDialog} onClose={handleCloseDialog}>\r\n                <DialogTitle>Selected Slot Information</DialogTitle>\r\n                <DialogContent>\r\n                    <Typography>\r\n                        {selectedSlot ? `You clicked on the slot: ${selectedSlot}` : 'No slot selected'}\r\n                        <br />\r\n                        {selectedPatientTime && (\r\n                            <div>\r\n                                {selectedPatientTime === 'No appointment booked'\r\n                                    ? selectedPatientTime\r\n                                    : `Patient Booking Times: ${selectedPatientTime}`}\r\n                            </div>\r\n                        )}\r\n                    </Typography>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Slots;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}