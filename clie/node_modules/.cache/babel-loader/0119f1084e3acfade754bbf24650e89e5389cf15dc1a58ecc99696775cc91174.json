{"ast":null,"code":"var _jsxFileName = \"C:\\\\saran\\\\healthCare\\\\healthcare\\\\c\\\\clie\\\\src\\\\components\\\\DoctorContainers\\\\Slots.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, Chip, Container, Dialog, DialogContent, DialogTitle, Grid, Typography } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Slots({\n  availability,\n  doctorAppointments,\n  formatAppointmentTime\n}) {\n  _s();\n  const [selectedSlot, setSelectedSlot] = useState(null);\n  const [openDialog, setOpenDialog] = useState(false);\n  const [selectedPatientTime, setSelectedPatientTime] = useState(null);\n  console.log(selectedPatientTime);\n  const handleClickChip = slot => {\n    console.log(slot);\n    setSelectedSlot(slot);\n    setOpenDialog(true);\n    const formattedSlot = formatAppointmentTime(slot); // Format slot to match booktime format\n\n    const patientTimes = availability.map(item => item.startTimes.map(startTime => {\n      const formattedSlot = formatAppointmentTime(startTime);\n      const patientTime = doctorAppointments.find(appointment => appointment.booktime === formattedSlot);\n      return {\n        slot: startTime,\n        patientTime: patientTime ? patientTime.booktime : 'No appointment booked'\n      };\n    }));\n    const patientTime = doctorAppointments.find(appointment => appointment.booktime === formattedSlot);\n    console.log('Slot:', slot); // Check the slot value\n    console.log('Doctor Appointments:', doctorAppointments); // Check the doctorAppointments array\n    console.log('Patient Time:', patientTime); // Log the patientTime\n\n    setSelectedPatientTime(patientTime ? patientTime.booktime : 'No appointment booked');\n  };\n  const handleCloseDialog = () => {\n    setSelectedSlot(null);\n    setSelectedPatientTime(null);\n    setOpenDialog(false);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: availability.map((item, index) => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          style: {\n            height: '100%'\n          },\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n              align: \"left\",\n              children: [\"Date: \", item.dates[0]]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                color: 'grey',\n                fontSize: '13px'\n              },\n              align: \"left\",\n              children: \"Upcoming Appointments\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: item.startTimes.map((startTime, timeIndex) => {\n                const formattedStartTime = formatAppointmentTime(startTime); // Format startTime to match booktime format\n                const isBooked = doctorAppointments.some(appointment => appointment.booktime === formattedStartTime);\n                return /*#__PURE__*/_jsxDEV(Chip, {\n                  label: startTime,\n                  variant: isBooked ? 'default' : 'outlined',\n                  color: isBooked ? 'primary' : 'default',\n                  className: \"mt-2\",\n                  onClick: () => handleClickChip(startTime)\n                }, timeIndex, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 23\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openDialog,\n      onClose: handleCloseDialog,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Selected Slot Information\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          children: [selectedSlot ? `You clicked on the slot: ${selectedSlot}` : 'No slot selected', /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 7\n          }, this), selectedPatientTime && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: selectedPatientTime === 'No appointment booked' ? selectedPatientTime : `Patient Booking Time: ${formatAppointmentTime(selectedPatientTime)}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(Slots, \"8vv7fkByhS3bYXGOg6aeEkHZM2k=\");\n_c = Slots;\nexport default Slots;\nvar _c;\n$RefreshReg$(_c, \"Slots\");","map":{"version":3,"names":["React","useState","useEffect","Card","CardContent","Chip","Container","Dialog","DialogContent","DialogTitle","Grid","Typography","jsxDEV","_jsxDEV","Slots","availability","doctorAppointments","formatAppointmentTime","_s","selectedSlot","setSelectedSlot","openDialog","setOpenDialog","selectedPatientTime","setSelectedPatientTime","console","log","handleClickChip","slot","formattedSlot","patientTimes","map","item","startTimes","startTime","patientTime","find","appointment","booktime","handleCloseDialog","maxWidth","children","container","spacing","index","xs","sm","md","style","height","align","dates","fileName","_jsxFileName","lineNumber","columnNumber","color","fontSize","timeIndex","formattedStartTime","isBooked","some","label","variant","className","onClick","open","onClose","_c","$RefreshReg$"],"sources":["C:/saran/healthCare/healthcare/c/clie/src/components/DoctorContainers/Slots.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, Chip, Container, Dialog, DialogContent, DialogTitle, Grid, Typography } from '@mui/material';\r\n\r\nfunction Slots({ availability, doctorAppointments, formatAppointmentTime }) {\r\n  const [selectedSlot, setSelectedSlot] = useState(null);\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [selectedPatientTime, setSelectedPatientTime] = useState(null);\r\n\r\n  \r\n  \r\n  console.log(selectedPatientTime);\r\n\r\n  const handleClickChip = (slot) => {\r\n    console.log(slot);\r\n    setSelectedSlot(slot);\r\n    setOpenDialog(true);\r\n\r\n    const formattedSlot = formatAppointmentTime(slot); // Format slot to match booktime format\r\n\r\n\r\n    const patientTimes = availability.map(item =>\r\n        item.startTimes.map(startTime => {\r\n          const formattedSlot = formatAppointmentTime(startTime);\r\n          const patientTime = doctorAppointments.find(appointment =>\r\n            appointment.booktime === formattedSlot\r\n          );\r\n          return {\r\n            slot: startTime,\r\n            patientTime: patientTime ? patientTime.booktime : 'No appointment booked',\r\n          };\r\n        })\r\n      );\r\n      \r\n\r\n    const patientTime = doctorAppointments.find(appointment =>\r\n      appointment.booktime === formattedSlot\r\n    );\r\n  \r\n    console.log('Slot:', slot); // Check the slot value\r\n    console.log('Doctor Appointments:', doctorAppointments); // Check the doctorAppointments array\r\n    console.log('Patient Time:', patientTime); // Log the patientTime\r\n\r\n    setSelectedPatientTime(patientTime ? patientTime.booktime : 'No appointment booked');\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setSelectedSlot(null);\r\n    setSelectedPatientTime(null);\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"md\">\r\n      <Grid container spacing={3}>\r\n        {availability.map((item, index) => (\r\n          <Grid key={index} item xs={12} sm={6} md={4}>\r\n            <Card style={{ height: '100%' }}>\r\n              <CardContent>\r\n                <h6 align=\"left\">Date: {item.dates[0]}</h6>\r\n                <p style={{ color: 'grey', fontSize: '13px' }} align=\"left\">\r\n                  Upcoming Appointments\r\n                </p>\r\n                <div>\r\n                {item.startTimes.map((startTime, timeIndex) => {\r\n  const formattedStartTime = formatAppointmentTime(startTime); // Format startTime to match booktime format\r\n  const isBooked = doctorAppointments.some(appointment =>\r\n    appointment.booktime === formattedStartTime\r\n  );\r\n\r\n                    return (\r\n                      <Chip\r\n                        key={timeIndex}\r\n                        label={startTime}\r\n                        variant={isBooked ? 'default' : 'outlined'}\r\n                        color={isBooked ? 'primary' : 'default'}\r\n                        className=\"mt-2\"\r\n                        onClick={() => handleClickChip(startTime)}\r\n                      />\r\n                    );\r\n                  })}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n      <Dialog open={openDialog} onClose={handleCloseDialog}>\r\n  <DialogTitle>Selected Slot Information</DialogTitle>\r\n  <DialogContent>\r\n    <Typography>\r\n      {selectedSlot ? `You clicked on the slot: ${selectedSlot}` : 'No slot selected'}\r\n      <br />\r\n      {selectedPatientTime && (\r\n        <div>\r\n          {selectedPatientTime === 'No appointment booked'\r\n            ? selectedPatientTime\r\n            : `Patient Booking Time: ${formatAppointmentTime(selectedPatientTime)}`}\r\n        </div>\r\n      )}\r\n    </Typography>\r\n  </DialogContent>\r\n</Dialog>\r\n\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Slots;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}