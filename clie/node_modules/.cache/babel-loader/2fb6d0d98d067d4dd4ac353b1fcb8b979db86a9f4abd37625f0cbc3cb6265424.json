{"ast":null,"code":"var _jsxFileName = \"C:\\\\saran\\\\healthCare\\\\healthcare\\\\c\\\\clie\\\\src\\\\components\\\\PatientContainers\\\\Dialog\\\\ApptDialog.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Dialog, DialogContent, DialogTitle, Typography, Chip } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ApptDialog({\n  recentClickedDate,\n  doctorUniqId,\n  id,\n  dialogOpen,\n  handleCloseDialog,\n  selectedDate,\n  doctorsAvailability,\n  setSelectedStartTime,\n  handleBooking\n}) {\n  _s();\n  const [selectedDoctorInfo, setSelectedDoctorInfo] = useState(null);\n  useEffect(() => {\n    const doctorInfo = doctorsAvailability.find(doctor => doctor.doctorId === doctorUniqId);\n    setSelectedDoctorInfo(doctorInfo);\n  }, [doctorsAvailability, doctorUniqId]);\n  const getAvailableTimeSlots = date => {\n    if (selectedDoctorInfo) {\n      const availabilityItem = selectedDoctorInfo.availability.find(item => item.dates[0] === date);\n      const bookedTimeSlots = availabilityItem ? availabilityItem.bookedTimeslots : [];\n      return availabilityItem ? availabilityItem.startTimes.filter(startTime => !bookedTimeSlots.includes(startTime)) : [];\n    }\n    return [];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Dialog, {\n      open: dialogOpen,\n      onClose: handleCloseDialog,\n      minWidth: \"md\",\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        style: {\n          fontSize: '17px',\n          fontWeight: \"550\"\n        },\n        children: selectedDoctorInfo ? `Dr. ${selectedDoctorInfo.doctorName}` : \"Doctor Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        style: {\n          marginTop: '-1rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          style: {\n            fontSize: '16px'\n          },\n          variant: \"body2\",\n          children: selectedDoctorInfo ? selectedDoctorInfo.specialist : \"Specialist\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          style: {\n            color: \"grey\"\n          },\n          children: \"33 N Fullerton Ave Montclair NJ 07042\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          style: {\n            color: \"grey\"\n          },\n          children: \"Available Start Times:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this), selectedDoctorInfo && selectedDoctorInfo.availability.map((availabilityItem, index) => {\n          const itemDate = new Date(availabilityItem.dates[0]);\n          const clickedDateTime = new Date(recentClickedDate);\n          if (itemDate >= clickedDateTime) {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                style: {\n                  fontSize: '15px'\n                },\n                variant: \"body2\",\n                children: itemDate.toLocaleDateString('en-US', {\n                  month: 'short',\n                  day: 'numeric'\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 37\n              }, this), getAvailableTimeSlots(availabilityItem.dates[0]).map((startTime, slotIndex) => /*#__PURE__*/_jsxDEV(Chip, {\n                style: {\n                  padding: \"1rem\",\n                  fontSize: \"15px\",\n                  borderRadius: \"2px\",\n                  margin: '0.3rem',\n                  background: \"yellow\"\n                },\n                label: startTime,\n                className: \"mt-2\",\n                onClick: () => {\n                  setSelectedStartTime(startTime);\n                  handleBooking(doctorUniqId, id, availabilityItem.dates[0]);\n                }\n              }, slotIndex, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 41\n              }, this))]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 33\n            }, this);\n          }\n          return null;\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n}\n_s(ApptDialog, \"qZlTZvBJ5IlMgTo8+ch4K2ILgfs=\");\n_c = ApptDialog;\nvar _c;\n$RefreshReg$(_c, \"ApptDialog\");","map":{"version":3,"names":["React","useEffect","useState","Dialog","DialogContent","DialogTitle","Typography","Chip","jsxDEV","_jsxDEV","ApptDialog","recentClickedDate","doctorUniqId","id","dialogOpen","handleCloseDialog","selectedDate","doctorsAvailability","setSelectedStartTime","handleBooking","_s","selectedDoctorInfo","setSelectedDoctorInfo","doctorInfo","find","doctor","doctorId","getAvailableTimeSlots","date","availabilityItem","availability","item","dates","bookedTimeSlots","bookedTimeslots","startTimes","filter","startTime","includes","children","open","onClose","minWidth","fullWidth","style","fontSize","fontWeight","doctorName","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","variant","specialist","color","map","index","itemDate","Date","clickedDateTime","toLocaleDateString","month","day","slotIndex","padding","borderRadius","margin","background","label","className","onClick","_c","$RefreshReg$"],"sources":["C:/saran/healthCare/healthcare/c/clie/src/components/PatientContainers/Dialog/ApptDialog.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {\r\n    Dialog,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Typography,\r\n    Chip,\r\n} from '@mui/material';\r\n\r\nexport default function ApptDialog({ recentClickedDate, doctorUniqId, id, dialogOpen, handleCloseDialog, selectedDate, doctorsAvailability, setSelectedStartTime, handleBooking }) {\r\n    const [selectedDoctorInfo, setSelectedDoctorInfo] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const doctorInfo = doctorsAvailability.find(doctor => doctor.doctorId === doctorUniqId);\r\n        setSelectedDoctorInfo(doctorInfo);\r\n    }, [doctorsAvailability, doctorUniqId]);\r\n\r\n    const getAvailableTimeSlots = (date) => {\r\n        if (selectedDoctorInfo) {\r\n            const availabilityItem = selectedDoctorInfo.availability.find(item => item.dates[0] === date);\r\n            const bookedTimeSlots = availabilityItem ? availabilityItem.bookedTimeslots : [];\r\n            return availabilityItem ? availabilityItem.startTimes.filter(startTime => !bookedTimeSlots.includes(startTime)) : [];\r\n        }\r\n        return [];\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Dialog open={dialogOpen} onClose={handleCloseDialog} minWidth=\"md\" fullWidth>\r\n                <DialogTitle style={{ fontSize: '17px', fontWeight: \"550\" }}>\r\n                    {selectedDoctorInfo ? `Dr. ${selectedDoctorInfo.doctorName}` : \"Doctor Name\"}\r\n                </DialogTitle>\r\n                <DialogContent style={{ marginTop: '-1rem' }}>\r\n                    <Typography style={{ fontSize: '16px' }} variant=\"body2\">\r\n                        {selectedDoctorInfo ? selectedDoctorInfo.specialist : \"Specialist\"}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" style={{ color: \"grey\" }}>33 N Fullerton Ave Montclair NJ 07042</Typography>\r\n                    <Typography variant=\"body2\" style={{ color: \"grey\" }}>Available Start Times:</Typography>\r\n                    {selectedDoctorInfo && selectedDoctorInfo.availability.map((availabilityItem, index) => {\r\n                        const itemDate = new Date(availabilityItem.dates[0]);\r\n                        const clickedDateTime = new Date(recentClickedDate);\r\n                        if (itemDate >= clickedDateTime) {\r\n                            return (\r\n                                <div key={index}>\r\n                                    <Typography style={{ fontSize: '15px' }} variant=\"body2\">\r\n                                        {itemDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\r\n                                    </Typography>\r\n                                    {getAvailableTimeSlots(availabilityItem.dates[0]).map((startTime, slotIndex) => (\r\n                                        <Chip\r\n                                            style={{ padding: \"1rem\", fontSize: \"15px\", borderRadius: \"2px\", margin: '0.3rem', background: \"yellow\" }}\r\n                                            key={slotIndex}\r\n                                            label={startTime}\r\n                                            className=\"mt-2\"\r\n                                            onClick={() => {\r\n                                                setSelectedStartTime(startTime);\r\n                                                handleBooking(doctorUniqId, id, availabilityItem.dates[0]);\r\n                                            }}\r\n                                        />\r\n                                    ))}\r\n                                </div>\r\n                            );\r\n                        }\r\n                        return null;\r\n                    })}\r\n                </DialogContent>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}