{"ast":null,"code":"var _jsxFileName = \"C:\\\\saran\\\\healthCare\\\\healthcare\\\\c\\\\clie\\\\src\\\\components\\\\PatientContainers\\\\Dialog\\\\ApptDialog.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Dialog, DialogContent, DialogTitle, Typography, Chip } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ApptDialog({\n  recentClickedDate,\n  doctorUniqId,\n  id,\n  dialogOpen,\n  handleCloseDialog,\n  selectedDate,\n  doctorsAvailability,\n  setSelectedStartTime,\n  handleBooking\n}) {\n  _s();\n  const [selectedDoctorInfo, setSelectedDoctorInfo] = useState(null);\n  useEffect(() => {\n    const doctorInfo = doctorsAvailability.find(doctor => doctor.doctorId === doctorUniqId);\n    setSelectedDoctorInfo(doctorInfo);\n  }, [doctorsAvailability, doctorUniqId]);\n  const getAvailableSlotsForDate = date => {\n    if (selectedDoctorInfo) {\n      const availabilityItem = selectedDoctorInfo.availability.find(item => item.dates[0] === date);\n      return availabilityItem ? availabilityItem.startTimes : [];\n    }\n    return [];\n  };\n\n  // Function to convert 24-hour time to 12-hour AM/PM format\n  const convertTo12HourFormat = time => {\n    const [hours, minutes] = time.split(\":\");\n    const parsedHours = parseInt(hours, 10);\n    const ampm = parsedHours >= 12 ? \"PM\" : \"AM\";\n    const twelveHour = parsedHours % 12 || 12;\n    return `${twelveHour}:${minutes} ${ampm}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Dialog, {\n      open: dialogOpen,\n      onClose: handleCloseDialog,\n      minWidth: \"md\",\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        style: {\n          fontSize: '17px',\n          fontWeight: \"550\"\n        },\n        children: selectedDoctorInfo ? `Dr. ${selectedDoctorInfo.doctorName}` : \"Doctor Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        style: {\n          marginTop: '-1rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          style: {\n            fontSize: '16px'\n          },\n          variant: \"body2\",\n          children: selectedDoctorInfo ? selectedDoctorInfo.specialist : \"Specialist\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          style: {\n            color: \"grey\"\n          },\n          children: \"33 N Fullerton Ave Montclair NJ 07042\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          style: {\n            color: \"grey\"\n          },\n          children: \"Available Start Times:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), selectedDoctorInfo && selectedDoctorInfo.availability.map((availabilityItem, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            style: {\n              fontSize: '15px'\n            },\n            variant: \"body2\",\n            children: new Date(availabilityItem.dates[0]).toLocaleDateString('en-US', {\n              month: 'short',\n              day: 'numeric'\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 29\n          }, this), getAvailableSlotsForDate(availabilityItem.dates[0]).map((startTime, slotIndex) => /*#__PURE__*/_jsxDEV(Chip, {\n            style: {\n              padding: \"1rem\",\n              fontSize: \"15px\",\n              borderRadius: \"2px\",\n              margin: '0.3rem',\n              background: \"yellow\"\n            },\n            label: convertTo12HourFormat(startTime) // Convert time to 12-hour format\n            ,\n            className: \"mt-2\",\n            onClick: () => {\n              setSelectedStartTime(startTime);\n              handleBooking(doctorUniqId, id, availabilityItem.dates[0]);\n            }\n          }, slotIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 33\n          }, this))]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n_s(ApptDialog, \"qZlTZvBJ5IlMgTo8+ch4K2ILgfs=\");\n_c = ApptDialog;\nvar _c;\n$RefreshReg$(_c, \"ApptDialog\");","map":{"version":3,"names":["React","useEffect","useState","Dialog","DialogContent","DialogTitle","Typography","Chip","jsxDEV","_jsxDEV","ApptDialog","recentClickedDate","doctorUniqId","id","dialogOpen","handleCloseDialog","selectedDate","doctorsAvailability","setSelectedStartTime","handleBooking","_s","selectedDoctorInfo","setSelectedDoctorInfo","doctorInfo","find","doctor","doctorId","getAvailableSlotsForDate","date","availabilityItem","availability","item","dates","startTimes","convertTo12HourFormat","time","hours","minutes","split","parsedHours","parseInt","ampm","twelveHour","children","open","onClose","minWidth","fullWidth","style","fontSize","fontWeight","doctorName","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","variant","specialist","color","map","index","Date","toLocaleDateString","month","day","startTime","slotIndex","padding","borderRadius","margin","background","label","className","onClick","_c","$RefreshReg$"],"sources":["C:/saran/healthCare/healthcare/c/clie/src/components/PatientContainers/Dialog/ApptDialog.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {\r\n    Dialog,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Typography,\r\n    Chip,\r\n} from '@mui/material';\r\n\r\n\r\n\r\nexport default function ApptDialog({ recentClickedDate, doctorUniqId, id, dialogOpen, handleCloseDialog, selectedDate, doctorsAvailability, setSelectedStartTime, handleBooking }) {\r\n    const [selectedDoctorInfo, setSelectedDoctorInfo] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const doctorInfo = doctorsAvailability.find(doctor => doctor.doctorId === doctorUniqId);\r\n        setSelectedDoctorInfo(doctorInfo);\r\n    }, [doctorsAvailability, doctorUniqId]);\r\n\r\n    const getAvailableSlotsForDate = (date) => {\r\n        if (selectedDoctorInfo) {\r\n            const availabilityItem = selectedDoctorInfo.availability.find(item => item.dates[0] === date);\r\n            return availabilityItem ? availabilityItem.startTimes : [];\r\n        }\r\n        return [];\r\n    };\r\n\r\n    // Function to convert 24-hour time to 12-hour AM/PM format\r\n    const convertTo12HourFormat = (time) => {\r\n        const [hours, minutes] = time.split(\":\");\r\n        const parsedHours = parseInt(hours, 10);\r\n        const ampm = parsedHours >= 12 ? \"PM\" : \"AM\";\r\n        const twelveHour = parsedHours % 12 || 12;\r\n        return `${twelveHour}:${minutes} ${ampm}`;\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Dialog open={dialogOpen} onClose={handleCloseDialog} minWidth=\"md\" fullWidth>\r\n                <DialogTitle style={{ fontSize: '17px', fontWeight: \"550\" }}>\r\n                    {selectedDoctorInfo ? `Dr. ${selectedDoctorInfo.doctorName}` : \"Doctor Name\"}\r\n                </DialogTitle>\r\n                <DialogContent style={{ marginTop: '-1rem' }}>\r\n                    <Typography style={{ fontSize: '16px' }} variant=\"body2\">\r\n                        {selectedDoctorInfo ? selectedDoctorInfo.specialist : \"Specialist\"}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" style={{ color: \"grey\" }}>33 N Fullerton Ave Montclair NJ 07042</Typography>\r\n                    <Typography variant=\"body2\" style={{ color: \"grey\" }}>Available Start Times:</Typography>\r\n                    {selectedDoctorInfo && selectedDoctorInfo.availability.map((availabilityItem, index) => (\r\n                        <div key={index}>\r\n                            <Typography style={{ fontSize: '15px' }} variant=\"body2\">\r\n                                {new Date(availabilityItem.dates[0]).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\r\n                            </Typography>\r\n                            {getAvailableSlotsForDate(availabilityItem.dates[0]).map((startTime, slotIndex) => (\r\n                                <Chip\r\n                                    style={{ padding: \"1rem\", fontSize: \"15px\", borderRadius: \"2px\", margin: '0.3rem', background: \"yellow\" }}\r\n                                    key={slotIndex}\r\n                                    label={convertTo12HourFormat(startTime)} // Convert time to 12-hour format\r\n                                    className=\"mt-2\"\r\n                                    onClick={() => {\r\n                                        setSelectedStartTime(startTime);\r\n                                        handleBooking(doctorUniqId, id,availabilityItem.dates[0]);\r\n                                    }}\r\n                                />\r\n                            ))}\r\n                        </div>\r\n                    ))}\r\n                </DialogContent>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}